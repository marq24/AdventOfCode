package de.emac.aoc;

import java.util.*;

public class D23 {
    private static final Character ELF = Character.valueOf('#');

    public static void main(String[] args) {
        v1(readMapData());
        v2(readMapData());
    }

    public static void v1(HashMap<Pos, Character> map) {
        Util.tStart(0);
        expandMap(map, 10);
        Util.tEnd(0, "Res1: "+countEmptyArea(map)+" (4208)");
    }

    public static void v2(HashMap<Pos, Character> map) {
        Util.tStart(0);
        Util.tEnd(0, "Res2: "+ expandMap(map, Integer.MAX_VALUE)+" (1016)");
    }

    public static HashMap<Pos, Character> readMapData(){
        HashMap<Pos, Character> map = new HashMap();
        String[] lines = INPUT.split("\n");
        for(int y=0; y<lines.length; y++){
            char[] line = lines[y].toCharArray();
            for (int x = 0; x < line.length; x++) {
                if (line[x] == '#') {
                    map.put(new Pos(x, y), ELF);
                }
            }
        }
        return map;
    }

    public static int expandMap(Map<Pos, Character> map, int maxRounds) {
        boolean changed = true;
        int round = 0;
        while (changed){
            HashMap<Pos, ArrayList<Pos>> proposals = new HashMap<>();
            for(Pos elf: map.keySet()) {
                int occupiedNeighbourCount = 0;
                for(Pos otherElf: elf.getNeighboursAsFlatSet()){
                    if(map.containsKey(otherElf)){
                        occupiedNeighbourCount++;
                    }
                }
                if (occupiedNeighbourCount != 0) {
                    boolean doNext = true;
                    List<List<Pos>> groups = elf.getNeighboursInGroups();
                    for (int i = 0; i < groups.size() && doNext; i++) {
                        List<Pos> neighboursInAGroup = groups.get((i + round) % groups.size());
                        int occupiedInGroup = 0;
                        for(Pos otherElf: neighboursInAGroup){
                            if(map.containsKey(otherElf)){
                                occupiedInGroup++;
                            }
                        }
                        if (occupiedInGroup == 0) {
                            Pos keyPos = neighboursInAGroup.get(0);
                            ArrayList<Pos> list = proposals.get(keyPos);
                            if(list==null){
                                list = new ArrayList<>();
                                proposals.put(keyPos, list);
                            }
                            list.add(elf);
                            doNext = false;
                        }
                    }
                }
            }

            for(Map.Entry<Pos, ArrayList<Pos>> aEntry : proposals.entrySet()){
                if(aEntry.getValue().size() == 1){
                    map.remove(aEntry.getValue().get(0));
                    map.put(aEntry.getKey(), ELF);
                }
            }
            round++;
            changed = proposals.size() > 0 && round < maxRounds;
        }
        return round;
    }

    public static int countEmptyArea(Map<Pos, Character> map) {
        int minX = Integer.MAX_VALUE;
        int maxX = Integer.MIN_VALUE;
        int minY = Integer.MAX_VALUE;
        int maxY = Integer.MIN_VALUE;
        for (Pos elf : map.keySet()) {
            minX = Math.min(minX, elf.x);
            maxX = Math.max(maxX, elf.x);
            minY = Math.min(minY, elf.y);
            maxY = Math.max(maxY, elf.y);
        }
        int area = (maxX - minX + 1) * (maxY - minY + 1);
        return area - map.size();
    }

    private record Pos(int x, int y) {

        List<List<Pos>> getNeighboursInGroups() {
            return List.of(
                    List.of(new Pos(x, y - 1), new Pos(x + 1, y - 1), new Pos(x - 1, y - 1)),
                    List.of(new Pos(x, y + 1), new Pos(x + 1, y + 1), new Pos(x - 1, y + 1)),
                    List.of(new Pos(x - 1, y), new Pos(x - 1, y - 1), new Pos(x - 1, y + 1)),
                    List.of(new Pos(x + 1, y), new Pos(x + 1, y - 1), new Pos(x + 1, y + 1))
            );
        }

        HashSet<Pos> getNeighboursAsFlatSet() {
            HashSet<Pos> ret = new HashSet<>();
            for(List<Pos> aList: getNeighboursInGroups()){
                ret.addAll(aList);
            }
            return ret;
        }
    }

    private static final String INPUT = """
            .##.#.#.#..#.#.##.##..#.###.#.####..#.#.##.##..##.#....##.#..####.##..###
            #..##.####.####.##.#.#..#.#..#.##.###..#...##.#.#...#...#..#.##.#.###.#..
            #.#..##....#.##.#.#...###....##.#...#..#.#.#####.##..#.##..###.####.#.###
            .#.....#.####..#.....#....#...#...###.###.#.#..##..####....####...#..#..#
            ##.#.##.#.#.......##...###.##.#.###...#.#.#.....#.#...##.#..#...#.##.###.
            #..##.#####.###.####.###..##.##...#..##.#..###.#####.####..#......###..#.
            #...###.#.###.#..#####.#.#.#.####...###.#..#....#....#...#..##.#...#.#.#.
            .###.##.##..#.........#.###.#.#..#.##.#.#.##.....#..###..#..##.##.####..#
            #.##.#..#####..###.#.......#####.#...###..###.#.#...####.#.###.##..##...#
            .#..#....#.##..#...##.###.##....#...##...#.....##.###...#.##.###..###...#
            .###.###....#.######.###..####.#..##..#.#.#####.####.#...##.##.....##..#.
            #..#.##..##.#.#.##.##..#######.#.########...##.#..##.##..#..##.#.###.####
            #.##...##.##..####.....#####..##.#...#...#.#.#.#..#.######.....###.####.#
            ###.....#...#.########..########..#..###..##.#.#.#.##.#.##..##.####.##.#.
            ##.....#..##.#...#.#.##.#...#..##.#.######..##..##...#..##..#....##.#..##
            #.####.#.#..#...#.........###...........#.....#.#...##......#.###..##....
            .####.####....#...#.#.##.######......#..##...##..#.#.###...####.##..#..#.
            .#.##..#.##.#.##....#..#####....###..#.##..#.##.#...#.#.##.#.......##.#..
            #..#.#.#.#..##...#..##...#####....#...######.#......#######.....#..#.####
            #...####..#.#.#.#.##....#.##.#..##...##..#.#..#.##.##.##.##....#.##.###..
            ..#.###.####..##.##.#...#.#......#.##..###.....##.###......####.....#...#
            .##..####...##.#...#.##..##.##..#....###.#..####.######.#..#...#.#....##.
            ..#....#.#...##.#.###..##.##...#.#..#.##...##...#....#.##.#.#.#...#..####
            ##..###...#.##.##..###.##..####.#.###.##.###.....###.####.##..#..#..#.##.
            .#.#.##.#.#..##..##.##.#.##.##.#...##.#....###.#..#...#..#.#.###.#..##..#
            ##...........###.#.###..#######....##.#.###.#...###.##.######.##..#..##..
            ###....#...##....#......#...#...##...#.##.#.#.#.###....#...##...##..#.#..
            #.###...#..#.#.###.#.##.....###..#..##...#.###...##.#####.#...#.....###.#
            ......##...#.#..#.####.##.###..#.#..#####.####.....#.........#....##.#.##
            .....#.#.#.#.#.#..##.#..##.#....###.#.#..####..##..##...#.##.#####..#..#.
            ##..#......###.......#.#.###..#..###..###.##..#..#.#.....#....##.###..###
            ...#.##.##.######....##...###..##.#......#.##....#....#..#.######.##...#.
            ......#.#.#.#..##.#.##...##.#....#.#.#####...#..####..#.##.#...###...##.#
            .....####....#.#####.##...##...........##.##...####..###.####.#.##...###.
            #....##..........##..#...#...##..#.#.###.##..#.###.#...#..#..#####....#..
            .#####.###...#.##.#...####.#.##....##.###....#..#..#.#..######...###.#.#.
            ..##.###....#..#.#....#.##..###...#.##..#..######.##.#..####..##.#.#.####
            #.#..#.#..##..#.#.####..#.##..####...##.#..#.###.##..#..###.##....###.#.#
            ..#.#...##..##....###.##.#..#.#..###.#..#.#.##..#.#.###..#.#.###...##.#..
            .##.#....#......##..#.#..#.##.#...##.######....#.....##.##.#..#####.#.#..
            #..#.#..#.#.###.##.#...#.....##.##.#..###.#..#....#.##.#####.#.#..#..#...
            #.###..###...###..###.....####.##..#####.#....####.#.#..####....##.###.##
            ..#.##..#.....##..#######.#.#..##..##..##...#..........##.#.#.#..#....#.#
            ....####.##.#..###.....##..##..#.####....#...#...##...#.#....#..#.#..###.
            #....##...###.#####.#.###.#...#.#.#.#....#..##...#.#...#..#..#.....#..#.#
            ###....##.##..#.##..#######.##.#.#.......#.##....###..#.#.......#.#####..
            #.##.#.####..##.#.#...######..###..##.##......###.##.#.##.##..#.....#.##.
            .###..##..###.#.##.#...#......#####.#.#..#......#.##.#.#.##..#..###.##.#.
            .##.##.##..#.###.#...##.####.#..#.#..#.##...###.#.....#.#...#####.#.#####
            ##.#..#...#.#....#.#.#.#..###...####...#......##...##.#..###..##..##.###.
            #....#.##.....#..###..##.###.##.#.###....#.#.###.#.....#..#..#..#..#####.
            .##.######.#..####..#.##.###..#...#####.##....##..##.#.#.##..#####.####.#
            ..#..#####.##.#..#.##.##.#...##.#..###.#.##.#..#..#.##.##.###.##....#.#..
            ..##.#.#.##.##...##..#.#....##.#..#.#.#..#####..##....#.#.#.###.....#..##
            #.#.##..#...####.##..#....#.#..##.#..#.####.##.#.###..#.#...#.##..####..#
            ##.......#.#.##.##....#.##...###..#.#..###.#..#.#..#.##...##...##..##...#
            ####.##..#..#..#..##.#.....#.#.###..##..#...#....#.##...#...##......##...
            ##..#....#..####.##.#.#....#.#.###...#.##...##.....##....#.###.#..#.####.
            ###.#...#.....#.#.##..#....##...####..#..#.....#....####..##.#.#....#####
            #..###...####..#.##.#..###.#...##.#.#.###.###.#.#...#..##.##..##.##.#..##
            #####...##....#.#.###......##.##.###.#..#.##.##.###...#..##.##...#######.
            .#.#.#########..###...#..#..######.......##.#....#.##.###..#...##...##..#
            ...###..#.##.#.#..#.........####.#.##...####..####..####.#.#.....#.#.#..#
            #####..#.##..###..###.#.##.#.##.###......#..#..#..###...##..#.###.###..##
            .##.#.#.#.....###.##.#..###...#....#..##..#....#.##.#.....####..##..#..##
            ##..#...#.....##.##.#...#.#.##.###..##.#....####....#####...#...#...####.
            .####....#...#.#..##..###...#.#..#.....#.#.##..#####........##.##....####
            ##.#####...#.####.#....#.#..##.##.###...##...#.##.##......#.##.......##..
            .##...##..#........####..#...#.#...###.......###.#.#..#.##.###...#..#....
            ....#.#.#............##.#..####...#...##.##..#....#..#.#..#.#.#.#.#.#.###
            ..#.#..#.#####.#.##.##.##..#.##.#..###..###..###..####.#.#.##..######.#..
            .#.#...#.##..##..#.####...#..##..####.#######.####.#...##....###.##.#.###
            ###.#..###.##.......##..#.....#.#.##.##.#.###.#..#####...##.##.#.....#...""";
}
